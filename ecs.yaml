AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Dhaka's ECS Fargate Flask App Deployment with CodeBuild and CodePipeline

Parameters:
  DhakaImageUri:
    Type: String
    Description: ECR Image URI for the Flask app
    Default: 442042520759.dkr.ecr.us-east-1.amazonaws.com/dhaka-flask-app:latest
  GitHubOwner:
    Type: String
    Description: GitHub username or organization
    Default: kubeadmm
  GitHubRepo:
    Type: String
    Description: GitHub repository name
    Default: dhaka-ecs-flask
  GitHubBranch:
    Type: String
    Description: GitHub branch to use
    Default: main
  GitHubOAuthToken:
    Type: String
    Description: GitHub OAuth token for CodePipeline (provide via console or CLI)
    NoEcho: true

Resources:
  # VPC
  DhakaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: dhaka-vpc

  # Internet Gateway
  DhakaIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: dhaka-igw

  DhakaVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref DhakaIGW
      VpcId: !Ref DhakaVPC

  # Public Subnets
  DhakaPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DhakaVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: dhaka-public-subnet-1

  DhakaPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DhakaVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: dhaka-public-subnet-2

  # Private Subnets
  DhakaPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DhakaVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: dhaka-private-subnet-1

  DhakaPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DhakaVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: dhaka-private-subnet-2

  # Route Tables
  DhakaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DhakaVPC
      Tags:
        - Key: Name
          Value: dhaka-public-rt

  DhakaPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: DhakaVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref DhakaPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DhakaIGW

  DhakaPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DhakaPublicSubnet1
      RouteTableId: !Ref DhakaPublicRouteTable

  DhakaPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DhakaPublicSubnet2
      RouteTableId: !Ref DhakaPublicRouteTable

  # NAT Gateway
  DhakaEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  DhakaNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt DhakaEIP.AllocationId
      SubnetId: !Ref DhakaPublicSubnet1
      Tags:
        - Key: Name
          Value: dhaka-nat-gw

  DhakaPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DhakaVPC
      Tags:
        - Key: Name
          Value: dhaka-private-rt

  DhakaPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DhakaPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref DhakaNATGateway

  DhakaPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DhakaPrivateSubnet1
      RouteTableId: !Ref DhakaPrivateRouteTable

  DhakaPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DhakaPrivateSubnet2
      RouteTableId: !Ref DhakaPrivateRouteTable

  # Security Groups
  DhakaALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref DhakaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: dhaka-alb-sg

  DhakaECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS Fargate tasks
      VpcId: !Ref DhakaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref DhakaALBSecurityGroup
      Tags:
        - Key: Name
          Value: dhaka-ecs-sg

  # Application Load Balancer
  DhakaALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref DhakaPublicSubnet1
        - !Ref DhakaPublicSubnet2
      SecurityGroups:
        - !Ref DhakaALBSecurityGroup
      Tags:
        - Key: Name
          Value: dhaka-alb

  DhakaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref DhakaVPC
      TargetType: ip
      HealthCheckPath: /
      Tags:
        - Key: Name
          Value: dhaka-tg

  DhakaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref DhakaALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DhakaTargetGroup

  # ECS Cluster
  DhakaECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: dhaka-ecs-cluster
      Tags:
        - Key: Name
          Value: dhaka-ecs-cluster

  # ECS Task Definition
  DhakaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: dhaka-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt DhakaTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: dhaka-flask-container
          Image: !Ref DhakaImageUri
          PortMappings:
            - ContainerPort: 5000
          Essential: true

  # ECS Task Execution Role
  DhakaTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: dhaka-ecs-task-exec-role

  # ECS Service
  DhakaECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - DhakaListener
    Properties:
      Cluster: !Ref DhakaECSCluster
      ServiceName: dhaka-service
      TaskDefinition: !Ref DhakaTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref DhakaPrivateSubnet1
            - !Ref DhakaPrivateSubnet2
          SecurityGroups:
            - !Ref DhakaECSSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: dhaka-flask-container
          ContainerPort: 5000
          TargetGroupArn: !Ref DhakaTargetGroup

  # Auto Scaling Role
  DhakaECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DhakaAutoScalingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                Resource: !Sub arn:aws:ecs:us-east-1:442042520759:service/${DhakaECSCluster}/${DhakaECSService.Name}

  # Auto Scaling Target
  DhakaAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub service/${DhakaECSCluster}/${DhakaECSService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt DhakaECSServiceAutoScalingRole.Arn

  # Auto Scaling Policy
  DhakaAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: dhaka-cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref DhakaAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  # ECR Repository
  DhakaECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: dhaka-flask-app
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: dhaka-ecr-repo

  # CodeBuild Role
  DhakaCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DhakaCodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketPolicy
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub arn:aws:s3:::codepipeline-us-east-1-*

DhakaCodeBuildProject:
  Type: AWS::CodeBuild::Project
  Properties:
    Name: dhaka-build
    ServiceRole: !GetAtt DhakaCodeBuildRole.Arn
    Artifacts:
      Type: CODEPIPELINE
    Environment:
      Type: LINUX_CONTAINER
      ComputeType: BUILD_GENERAL1_SMALL
      Image: aws/codebuild/standard:5.0
      PrivilegedMode: true
      EnvironmentVariables:
        - Name: AWS_DEFAULT_REGION
          Value: us-east-1
        - Name: ECR_REGISTRY
          Value: 442042520759.dkr.ecr.us-east-1.amazonaws.com
        - Name: IMAGE_REPO_NAME
          Value: dhaka-flask-app
        - Name: IMAGE_TAG
          Value: latest
        - Name: CONTAINER_NAME
          Value: dhaka-flask-container
    Source:
      Type: CODEPIPELINE
      BuildSpec: |
        version: 0.2
        phases:
          pre_build:
            commands:
              - echo Logging in to Amazon ECR...
              - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          build:
            commands:
              - echo Checking repository contents...
              - ls -la
              - echo Displaying Dockerfile...
              - cat Dockerfile || echo "Dockerfile not found or empty"
              - echo Building the Docker image...
              - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
              - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG
          post_build:
            commands:
              - echo Pushing the Docker image...
              - docker push $ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG
              - echo Writing image definitions file...
              - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
        artifacts:
          files:
            - imagedefinitions.json

  # CodePipeline Role
  DhakaCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DhakaCodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - iam:PassRole
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketPolicy
                Resource: '*'

  # CodePipeline
  DhakaCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt DhakaCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Sub codepipeline-us-east-1-${AWS::AccountId}
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref DhakaCodeBuildProject
              RunOrder: 1
        - Name: Approval
          Actions:
            - Name: ManualApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref DhakaECSCluster
                ServiceName: !Ref DhakaECSService
                FileName: imagedefinitions.json
              RunOrder: 1

Outputs:
  ALBEndpoint:
    Description: URL of the Application Load Balancer
    Value: !Sub http://${DhakaALB.DNSName}
  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref DhakaECSCluster
  ECRRepositoryUri:
    Description: URI of the ECR Repository
    Value: !GetAtt DhakaECRRepository.RepositoryUri
  CodePipelineName:
    Description: Name of the CodePipeline
    Value: !Ref DhakaCodePipeline